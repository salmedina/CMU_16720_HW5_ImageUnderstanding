function [x, y, score, scale] = multiscale_detect(I, template, ndet, pyramid_ratio)
% input:
%     image - test image.
%     template - [16 x 16x 9] matrix.
%     ndet - the number of return values.
%     pyramid_ratio - image scale resize ratio
% output:
%      det_res - [ndet x 3] matrix
%                column one is the x coordinate
%                column two is the y coordinate
%                column three is the scale, i.e. 1, 0.7 or 0.49 ..
filter_size =128;

while(size(I,1)>filter_size)
    featMap = hog(I);
    [m,n,k] = size(featMap);
    corrMap = zeros(m,n);
    for i = 1:k
        corrMap = corrMap + imfilter(featMap(:,:,i),template(:,:,i));
    end
    
    I = imresize(I, pyramid_ratio);
end
featMap = hog(I);
[m,n,k] = size(featMap);
corrMap = zeros(m,n);



% transform into (m*n)x3 matrix [x,y,s]
[xx, yy] = meshgrid(1:n, 1:m);
S = [(xx(:).*8-4) (yy(:).*8-4) corrMap(:)];

% sort by score
S = flipud(sortrows(S,3));

% Non-Maxima Suppression
d = 128;
res = zeros(ndet,3);

for i = 1:ndet
    res(i,:) = S(1,:); %keep the top one
    curX = S(1,1);
    curY = S(1,2);
    minX = curX - d;
    maxX = curX + d;
    minY = curY - d;
    maxY = curY + d;
    sSz = size(S,1)
    keep = zeros(sSz);
    for j = 1:sSz
        tmpX = S(j,1);
        tmpY = S(j,2);
        keep(j) = tmpX < minX | tmpX > maxX | tmpY < minY | tmpY > maxY;
    end
    S = S(find(keep), :);
end

x = res(1:ndet,1);
y = res(1:ndet,2);
score = S(1:ndet,3);
scale =1;

end

